{"ast":null,"code":"import axios from \"axios\";\nimport TokenService from \"./token.service\";\nimport AuthService from \"./auth.service\";\nimport { useNavigate } from \"react-router-dom\";\nconst instance = axios.create({\n  baseURL: \"http://localhost:3030/mv-core/v1\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Before making request, do the following\ninstance.interceptors.request.use(config => {\n  // console.log(\"getLocalAccessToken\", TokenService.getLocalAccessToken());\n  const token = TokenService.getLocalAccessToken();\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// With response data, do the following\ninstance.interceptors.response.use(res => {\n  return res;\n}, async err => {\n  const originalConfig = err.config;\n  if (err.response) {\n    // access token expired\n    if (err.response.status === 403 && !originalConfig._retry) {\n      // handle infinite loop\n      originalConfig._retry = true;\n\n      // console.log(\"refresh\", TokenService.getLocalRefreshToken());\n      try {\n        const rs = await instance.post(\"/auth/login\", {\n          refreshToken: TokenService.getLocalRefreshToken()\n        });\n        console.log(\"response\", rs);\n        const {\n          accessToken\n        } = rs.data;\n        console.log(\"updateNewAccessToken\", accessToken);\n        TokenService.updateNewAccessToken(accessToken);\n        return instance(originalConfig);\n      } catch (_error) {\n        return Promise.reject(_error);\n      }\n    }\n\n    // refresh token expired\n  }\n\n  return Promise.reject(err);\n});\nexport default instance;","map":{"version":3,"names":["axios","TokenService","AuthService","useNavigate","instance","create","baseURL","headers","interceptors","request","use","config","token","getLocalAccessToken","error","Promise","reject","response","res","err","originalConfig","status","_retry","rs","post","refreshToken","getLocalRefreshToken","console","log","accessToken","data","updateNewAccessToken","_error"],"sources":["C:/Users/LE HOANG NHAT/OneDrive/Documents/GitHub/AdminQuanLyBanHang/src/service/api.js"],"sourcesContent":["import axios from \"axios\";\r\nimport TokenService from \"./token.service\";\r\nimport AuthService from \"./auth.service\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"http://localhost:3030/mv-core/v1\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Before making request, do the following\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    // console.log(\"getLocalAccessToken\", TokenService.getLocalAccessToken());\r\n    const token = TokenService.getLocalAccessToken();\r\n    if (token) {\r\n      config.headers[\"x-auth-token\"] = token;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// With response data, do the following\r\ninstance.interceptors.response.use(\r\n  (res) => {\r\n    return res;\r\n  },\r\n  async (err) => {\r\n    const originalConfig = err.config;\r\n\r\n    if (err.response) {\r\n      // access token expired\r\n      if (err.response.status === 403 && !originalConfig._retry) {\r\n        // handle infinite loop\r\n        originalConfig._retry = true;\r\n\r\n        // console.log(\"refresh\", TokenService.getLocalRefreshToken());\r\n        try {\r\n          const rs = await instance.post(\"/auth/login\", {\r\n            refreshToken: TokenService.getLocalRefreshToken(),\r\n          });\r\n\r\n          console.log(\"response\", rs);\r\n\r\n          const { accessToken } = rs.data;\r\n\r\n          console.log(\"updateNewAccessToken\", accessToken);\r\n          TokenService.updateNewAccessToken(accessToken);\r\n\r\n          return instance(originalConfig);\r\n        } catch (_error) {\r\n          return Promise.reject(_error);\r\n        }\r\n      }\r\n\r\n      // refresh token expired\r\n    }\r\n\r\n    return Promise.reject(err);\r\n  }\r\n);\r\n\r\nexport default instance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,iBAAiB;AAC1C,OAAOC,WAAW,MAAM,gBAAgB;AACxC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC5BC,OAAO,EAAE,kCAAkC;EAC3CC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGX,YAAY,CAACY,mBAAmB,EAAE;EAChD,IAAID,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,cAAc,CAAC,GAAGK,KAAK;EACxC;EACA,OAAOD,MAAM;AACf,CAAC,EACAG,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CACF;;AAED;AACAV,QAAQ,CAACI,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC/BQ,GAAG,IAAK;EACP,OAAOA,GAAG;AACZ,CAAC,EACD,MAAOC,GAAG,IAAK;EACb,MAAMC,cAAc,GAAGD,GAAG,CAACR,MAAM;EAEjC,IAAIQ,GAAG,CAACF,QAAQ,EAAE;IAChB;IACA,IAAIE,GAAG,CAACF,QAAQ,CAACI,MAAM,KAAK,GAAG,IAAI,CAACD,cAAc,CAACE,MAAM,EAAE;MACzD;MACAF,cAAc,CAACE,MAAM,GAAG,IAAI;;MAE5B;MACA,IAAI;QACF,MAAMC,EAAE,GAAG,MAAMnB,QAAQ,CAACoB,IAAI,CAAC,aAAa,EAAE;UAC5CC,YAAY,EAAExB,YAAY,CAACyB,oBAAoB;QACjD,CAAC,CAAC;QAEFC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEL,EAAE,CAAC;QAE3B,MAAM;UAAEM;QAAY,CAAC,GAAGN,EAAE,CAACO,IAAI;QAE/BH,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEC,WAAW,CAAC;QAChD5B,YAAY,CAAC8B,oBAAoB,CAACF,WAAW,CAAC;QAE9C,OAAOzB,QAAQ,CAACgB,cAAc,CAAC;MACjC,CAAC,CAAC,OAAOY,MAAM,EAAE;QACf,OAAOjB,OAAO,CAACC,MAAM,CAACgB,MAAM,CAAC;MAC/B;IACF;;IAEA;EACF;;EAEA,OAAOjB,OAAO,CAACC,MAAM,CAACG,GAAG,CAAC;AAC5B,CAAC,CACF;AAED,eAAef,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}